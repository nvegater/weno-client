# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type CheckoutLinkResponse {
  errors: [FieldError!]
  link: String
}

type CheckoutSessionResponse {
  errors: [FieldError!]
  payment_status: String
  reservations: [ReservationDts!]
  sessionUrl: String
}

"BefCur:null & AftCur:null => First Page N Results (N=limit) + AftCur:Y (if more results exist).BefCur:null & AftCur:Y => Page with N Results + BefCurY + AftCur:X (if more exist)BefCur:X & AftCur:null => End of the list.BefCur:X & AftCur:Y => Ignores X."
type CursorPaginationResult {
  afterCursor: String
  beforeCursor: String
  limit: Int
}

type CustomerDts {
  createdAt: DateTime!
  email: String!
  id: String!
  stripeCustomerId: String!
  updatedAt: DateTime!
  username: String
}

type CustomerResponse {
  customer: CustomerDts
  errors: [FieldError!]
}

type DateWithTimes {
  date: DateTime!
  durationInMinutes: Float!
  times: [DateTime!]!
}

type Experience {
  allAttendeesAllSlots: Int
  createdAt: DateTime!
  description: String!
  experienceType: ExperienceType!
  id: Int!
  images: [ExperienceImage!]
  pricePerPersonInDollars: Float!
  slots: [ExperienceSlot!]!
  title: String!
  updatedAt: DateTime!
  winery: Winery!
  wineryId: Int!
}

type ExperienceImage {
  coverPage: Boolean
  createdAt: DateTime!
  experience: Experience!
  experienceId: Float!
  id: Float!
  imageKey: String!
  updatedAt: DateTime!
}

type ExperienceResponse {
  dateWithTimes: [DateWithTimes!]
  errors: [FieldError!]
  experience: Experience
}

type ExperienceSlot {
  createdAt: DateTime!
  durationInMinutes: Int!
  endDateTime: DateTime!
  experience: Experience!
  experienceId: Float!
  id: Int!
  limitOfAttendees: Int!
  noOfAttendees: Int
  pricePerPersonInDollars: Float!
  reservations: [Reservation!]
  slotType: SlotType!
  startDateTime: DateTime!
  updatedAt: DateTime!
}

type FieldError {
  field: String!
  message: String!
}

type GetImage {
  getUrl: String!
  imageKey: String!
}

type GetPreSignedUrlResponse {
  arrayUrl: [PresignedResponse!]
  errors: [FieldError!]
}

type ImageGalleryResponse {
  errors: [FieldError!]
  gallery: [GetImage!]
}

type InsertImageResponse {
  errors: [FieldError!]
  imageKeys: [String!]
}

type Mutation {
  "Trigger: winery information Page. If called for the first time, updates the winery connected account creation dateOtherwise simply return the winery"
  confirmConnectedAccount(wineryAlias: String!): WineryResponse!
  createCustomer(createCustomerInputs: CreateCustomerInputs!): CustomerResponse!
  createExperience(
    createExperienceInputs: CreateExperienceInputs!
    createRecurrentDatesInputs: CreateRecurrentDatesInputs!
  ): ExperienceResponse!
  createReservation: Boolean!
  createWinery(
    createWineryInputs: CreateWineryInputs!
    userInputs: UserInputs!
  ): WineryResponse!
  getCheckoutLink(
    cancelUrl: String!
    createCustomerInputs: CreateCustomerInputs!
    noOfVisitors: Float!
    slotIds: [Int!]!
    successUrl: String!
  ): CheckoutLinkResponse!
  preSignedUrl(
    creatorUsername: String
    fileNames: [String!]!
    uploadType: UploadType!
    wineryAlias: String
    wineryId: Int
  ): GetPreSignedUrlResponse!
  saveImages(imageKeys: [String!]!, wineryId: Int): InsertImageResponse!
  wineryImages(wineryAlias: String, wineryId: Int): ImageGalleryResponse!
  wineryOnboarding(wineryAlias: String!): OnboardingResponse!
}

type OnboardingResponse {
  accountLinkUrl: String
  errors: [FieldError!]
}

type PaginatedExperience {
  allAttendeesAllSlots: Int
  createdAt: DateTime!
  description: String!
  experienceType: ExperienceType!
  id: Int!
  pricePerPersonInDollars: Float!
  title: String!
  wineryId: Int!
  wineryName: String!
}

type PaginatedExperienceWithSlots {
  allAttendeesAllSlots: Int
  createdAt: DateTime!
  description: String!
  experienceType: ExperienceType!
  id: Int!
  pricePerPersonInDollars: Float!
  slots: [ExperienceSlot!]!
  title: String!
  wineryId: Int!
  wineryName: String!
}

type PaginatedExperiences {
  errors: [FieldError!]
  experiences: [PaginatedExperience!]
  paginationConfig: CursorPaginationResult!
  totalExperiences: Float!
}

type PaginatedExperiencesWithSlots {
  errors: [FieldError!]
  experiences: [PaginatedExperienceWithSlots!]
  paginationConfig: CursorPaginationResult!
  totalExperiences: Float!
}

type PresignedResponse {
  errors: [FieldError!]
  getUrl: String
  putUrl: String
}

type Price {
  currency: String!
  id: String!
  tiers: [Tier!]
  tiersMode: String
  type: String!
  unitAmount: Float
  unitAmountDecimal: String
}

type Product {
  description: String!
  id: String!
  images: [String!]!
  name: String!
  price: [Price!]!
  unit_label: String!
}

type ProductsResponse {
  errors: [FieldError!]
  products: [Product!]
}

type Query {
  allReservations: Int!
  allWineries: Int!
  bookableExperiences(
    paginatedExperiencesInputs: PaginatedExperiencesInputs!
  ): PaginatedExperiences!
  editableExperiences(
    paginatedExperiencesInputs: PaginatedExperiencesInputs!
    wineryId: Float!
  ): PaginatedExperiencesWithSlots!
  experienceWithSlots(
    experienceId: Float!
    onlyBookableSlots: Boolean!
  ): ExperienceResponse!
  experiences(
    paginatedExperiencesInputs: PaginatedExperiencesInputs!
  ): PaginatedExperiences!
  getCheckoutSessionStatus(sessionId: String!): CheckoutSessionResponse!
  getSubscriptionProducts: ProductsResponse!
  getSubscriptionStatus(customerId: String!): String!
  recurrentDates(
    createRecurrentDatesInputs: CreateRecurrentDatesInputs!
  ): RecurrenceResponse!
  winery(getWineryInputs: GetWineryInputs!): WineryResponse!
}

type RecurrenceResponse {
  dateWithTimes: [DateWithTimes!]
  errors: [FieldError!]
}

type Reservation {
  createdAt: DateTime!
  email: String!
  endDateTime: DateTime!
  id: Int!
  noOfAttendees: Int!
  paymentStatus: String!
  pricePerPersonInDollars: Float!
  slot: ExperienceSlot!
  slotId: Int!
  startDateTime: DateTime!
  title: String!
  updatedAt: DateTime!
  username: String
  wineryName: String!
}

type ReservationDts {
  createdAt: DateTime!
  email: String!
  endDateTime: DateTime!
  id: Int!
  noOfAttendees: Int!
  paymentStatus: String!
  pricePerPersonInDollars: Float!
  slotId: Int!
  startDateTime: DateTime!
  title: String!
  updatedAt: DateTime!
  username: String
  wineryName: String!
}

type Tier {
  flat_amount: Float
  flat_amount_decimal: String
  unit_amount: Float
  unit_amount_decimal: String
  up_to: Float
}

type Winery {
  "Time at which the connected account was created. Measured in seconds since the Unix epoch. The default -1 Means that the account is not created Yet"
  accountCreatedTime: Float
  accountId: String
  amenities: [Amenity!]
  architecturalReferences: Boolean
  contactEmail: String
  contactName: String
  contactPhoneNumber: String
  covidLabel: Boolean
  createdAt: DateTime!
  creatorEmail: String!
  creatorUsername: String!
  description: String!
  enologoName: String
  experiences: [Experience!]
  foundationYear: Int
  googleMapsUrl: String
  handicappedFriendly: Boolean
  id: Int!
  images: [WineryImage!]
  logo: String
  name: String!
  othersServices: [OtherServices!]
  petFriendly: Boolean
  postalAddress: String
  productRegion: String
  productionType: [ProductionType!]
  stripe_customerId: String
  subscription: String
  supportedLanguages: [ServiceLanguage!]
  updatedAt: DateTime!
  urlAlias: String!
  urlImageCover: String
  valley: Valley!
  verified: Boolean
  wineGrapesProduction: [Grape!]
  wineType: [TypeWine!]
  yearlyWineProduction: Int
  younerFriendly: Boolean
}

type WineryImage {
  coverPage: Boolean
  createdAt: DateTime!
  id: Float!
  imageKey: String!
  updatedAt: DateTime!
  winery: Winery!
  wineryAlias: String!
  wineryId: Float!
}

type WineryResponse {
  errors: [FieldError!]
  sessionUrl: String
  winery: Winery
}

"Types of wine production"
enum Amenity {
  ACTIVIDADES_EN_VINEDO
  CATAS_MARIDAJES
  CATAS_PRIVADAS
  CATA_BARRICAS
  CREA_TU_MEZCLA
  DEGUSTACION
  PASEO_CARRETA
  RECORRIDO_BODEGA
  RECORRIDO_VINEDOS
  TALLERES_DIDACTICOS
  TERRAZA
  VISITA_CAVA_BARRICAS
}

"Type of experience"
enum ExperienceType {
  CONCERT
  DEGUSTATION
  WINE_DINNER_PAIRING
}

"A winery can have one o more kind of grape"
enum Grape {
  AGLIANICO
  BARBERA
  BRUNELLO
  CABERNET_FRANC
  CABERNET_SAUVIGNON
  CARIGNAN
  CHARDONNAY
  CHENIN_BLANC
  CINSAUL
  COLOMBARD
  GEWURZTRAMINER
  GRENACHE
  GRENACHE_BLANC
  MALBEC
  MALVASIA_BLANCA
  MALVASIA_TINTA
  MERLOT
  MISION
  MONTEPULCIANO
  MOSCATEL
  MOURVEDRE
  NEBBIOLO
  OTRA
  PALOMINO
  PETITE_VERDOT
  PINOT_BLANC
  PINOT_GRIS
  PINOT_NOIR
  RIESLING
  RUBI_CABERNET
  SANGIOVESE
  SAUVIGNON_BLANC
  SEMILLON
  SINSAULT
  SYRAH
  TEMPRANILLO
  VIOGNIER
  ZINFANDEL
}

"differents kind of services"
enum OtherServices {
  BARRA_DE_ALIMENTOS
  HOSPEDAJE
  RESTAURANTE
}

"Types of wine production"
enum ProductionType {
  COMERCIAL
  ORG_BIO_NAT
  TRAD_ARTESANAL
}

"Languages supported by the Wineries"
enum ServiceLanguage {
  ALEMAN
  ESPANOL
  FRANCES
  INGLES
  ITALIANO
  JAPONES
  MANDARIN
  PORTUGUES
  SENAS_MEXICANAS
}

"Type of slot"
enum SlotType {
  ALL_DAY
  ONE_TIME
  RECURRENT
}

"Types of wine produced by a winery"
enum TypeWine {
  BIODINAMICO
  BLANCO_CON_BARRICA
  BLANCO_JOVEN
  CONMEMORATIVO_EDI_LIMITADA
  COSECHA
  DULCE
  ESPUMOSO
  EXCLUSIVO_VENTA_LOCAL
  GENEROSO_FORTIFICADO
  NARANJA
  NATURAL
  ORGANICO
  ROSADO
  TINTO_CRIANZA_BARRICA
  TINTO_JOVEN
}

"Se pueden cargar imagenes para distintos elementos, usuarios, galerias de vi√±eros etc, etc"
enum UploadType {
  USER_PIC
  WINERY_LOGO
  WINERY_PIC
}

"A winery is in an unique valley, valleys are not identifiable through addresses"
enum Valley {
  CALAFIA
  ENSENADA
  GRULLA
  GUADALUPE
  OJOS_NEGROS
  SANTO_TOMAS
  SAN_ANT_MINAS
  SAN_QUINTIN
  SAN_VICENTE
}

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"If customer has metadata, it means it is a registered user and It has an username.But Customers dont need to be registered. They can book events as guests, thats why the metadata prop is nullable"
input CreateCustomerInputs {
  email: String!
  paymentMetadata: PaymentMetadataInputs
}

input CreateExperienceInputs {
  description: String!
  limitOfAttendees: Float!
  pricePerPersonInDollars: Float!
  title: String!
  typeOfEvent: ExperienceType!
  wineryId: Float!
}

input CreateRecurrentDatesInputs {
  customDates: [DateTime!]
  durationInMinutes: Float!
  endDate: DateTime!
  exceptionDays: [String!]
  exceptions: [DateTime!]
  slotType: SlotType!
  startDate: DateTime!
}

input CreateWineryInputs {
  amenities: [Amenity!]
  contactEmail: String
  contactPhoneNumber: String
  covidLabel: Boolean!
  description: String!
  foundationYear: Int
  googleMapsUrl: String
  name: String!
  productionType: [ProductionType!]!
  subscription: String!
  supportedLanguages: [ServiceLanguage!]
  urlAlias: String!
  valley: Valley!
  wineType: [TypeWine!]!
  yearlyWineProduction: Int
}

"BefCur:null & AftCur:null => First Page N Results (N=limit) + AftCur:Y (if more results exist).BefCur:null & AftCur:Y => Page with N Results + BefCurY + AftCur:X (if more exist)BefCur:X & AftCur:null => End of the list.BefCur:X & AftCur:Y => Ignores X."
input CursorPaginationInput {
  afterCursor: String
  beforeCursor: String
  limit: Int
}

input ExperiencesFilters {
  experienceName: String
  experienceType: [ExperienceType!]
  valley: [Valley!]
}

input GetWineryInputs {
  creatorUsername: String
  urlAlias: String
}

"""
Default:
Sort from Newest to Oldest all the Table.
It never exceeds the limit

Optional:
The cursor is a timestamp.
Returns all the experiences after the given timestamp (with limit)
If no cursor is provided, it will return all experiences newest First (with limit)

Filters:
If experience name is provided search without exact match (LIKE)
ExperienceType: if null, All the experience Types. Otherwise ONLY the selected ones.
Valleys: if null, All the Valleys. Otherwise ONLY the selected ones.
"""
input PaginatedExperiencesInputs {
  experiencesFilters: ExperiencesFilters!
  getUpcomingSlots: Boolean
  onlyWithAvailableSeats: Boolean
  paginationConfig: CursorPaginationInput!
}

input PaymentMetadataInputs {
  username: String!
}

input UserInputs {
  cancelUrl: String!
  email: String!
  successUrl: String!
  username: String!
}
